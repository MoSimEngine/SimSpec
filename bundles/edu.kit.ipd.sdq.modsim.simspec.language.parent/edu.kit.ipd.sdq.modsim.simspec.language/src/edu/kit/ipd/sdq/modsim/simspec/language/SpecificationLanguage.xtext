grammar edu.kit.ipd.sdq.modsim.simspec.language.SpecificationLanguage with org.eclipse.xtext.common.Terminals

import "http://www.example.org/structure" as structure
import "http://www.example.org/datatypes" as datatypes
import "http://www.example.org/behavior" as behavior
import "http://www.example.org/expressions" as expr
import "http://www.example.org/arrayoperations" as array
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate specificationLanguage "http://www.kit.edu/ipd/sdq/modsim/simspec/language/SpecificationLanguage"

SimModelElement:
	{SimFeature} ('feature' name=QualifiedName
	(uses+=UseFeature)*
	(events+=Event | entities+=Entity | enums+=EnumDeclaration)*)
	|
	{SimSpecification} 'simulator' name=ID '{' 
		('description' '=' description=STRING)?
		('features' features+=[SimFeature|QualifiedName] (',' features+=[SimFeature|QualifiedName])*)? 
	'}';
	
UseFeature: 'use' feature=[SimFeature];//importedNamespace=QualifiedNameWithWildcard;
	
Event returns structure::Event:
	('event' {GEvent} name=ID '{'
		('reads' readAttributes+=[structure::Attribute|QualifiedName] (',' readAttributes+=[structure::Attribute|QualifiedName])*)?
		
		(schedules+=GSchedules | writeAttributes+=GWritesAttribute | definitions+=Definition)*
	'}')
;

EnumDeclaration returns datatypes::EnumDeclaration: 
	'datatype' name=ID '{'
		(literals+=ID) (',' literals+=ID)*
	'}';
	
Entity returns structure::Entity:
	'entity' name=ID ('{'
		(attributes+=Attribute)*
	'}')?;
	
Attribute returns structure::Attribute:
	name=ID ':' type=Type;
	
Type returns datatypes::DataType: 
	{datatypes::BaseDataType} primitiveType=PrimitiveType |
	EnumType |
	ArrayType;

enum PrimitiveType returns datatypes::PrimitiveType: INT | DOUBLE | BOOL;
EnumType returns datatypes::EnumType: declaration=[datatypes::EnumDeclaration];
ArrayType returns datatypes::ArrayDataType: 'ARRAY' '[' contentType=Type ']';


GSchedules: 
	'schedules' endEvent=[structure::Event]
	(delaySpec=Delay? & (conditionSpec=Condition)?);
	
GWritesAttribute: 
	'writes' writeFunction=(WriteToValue | WriteToArray)
	(conditionSpec=Condition)?;
	
Delay: 'with' 'delay' '=' delay=Expression;
Condition: 'when' condition=Expression;

WriteToValue returns WriteFunction: {WriteToValue} attribute=[structure::Attribute|QualifiedName] '=' value=Expression;
WriteToArray returns WriteFunction: {WriteToArray} attribute=[structure::Attribute|QualifiedName] '[' index=Expression ']' '=' value=Expression;

Definition: 'def' name=ID '=' expression=Expression;


enum Comp returns expr::Comparator: EQUAL = '==' | LESS_THAN = '<' | LESS_THAN_EQUAL = '<=' | GREATER_THAN = '>' | GREATER_THAN_EQUAL = '>=';
enum OpPlusMinus returns expr::Operator: PLUS = '+' | MINUS = '-';
enum OpMultDiv returns expr::Operator: MULT = '*' | DIV = '/' | MOD = '%';
enum OpBool returns expr::Operator: AND = '&&' | OR = '||'; 
enum OpUnary returns expr::UnaryOperator: MINUS = '-' | NEGATION = '!'; // type cast is covered by separate Prefixed rule

Expression returns behavior::Expression: 
	BoolOperation | IfThenElse;
	
IfThenElse returns expr::IfThenElse:
	'if' condition=Expression 
	'then' thenBranch=Expression 
	(=> 'else' elseBranch=Expression);
	
BoolOperation returns behavior::Expression:
	Comparison (({expr::BinaryOperation.left=current} operator=OpBool) right=Comparison)*;
	
Comparison returns behavior::Expression:
	Addition (({expr::Comparison.left=current} comparator=Comp) right=Addition)*;
	
Addition returns behavior::Expression:
	Multiplication (({expr::BinaryOperation.left=current} operator=OpPlusMinus) right=Multiplication)*; 

Multiplication returns behavior::Expression:
	Prefixed (({expr::BinaryOperation.left=current} operator=OpMultDiv) right=Prefixed)*;

Prefixed returns behavior::Expression:
	{expr::UnaryOperation} => operator=OpUnary operand=Suffixed |
	// only int <-> double casts can be typed and used atm, but this allows for more complex casts in the future
	// note that TypeCast is a new class and needs to be converted to UnaryOperation later (in generator.ExpressionCopier)
	{TypeCast} => '(' targetType=Type ')' expression=Suffixed |
	Suffixed
;

Suffixed returns behavior::Expression:
	Atomic (({array::ArrayRead.array=current}) '[' index=Expression ']')*;

Atomic returns behavior::Expression:
	'(' Expression ')' |
	{expr::Variable} attribute=[structure::Attribute] | 
	Constant | 
	{DefinitionReference} '$' definition=[Definition];

Constant returns expr::Constant: 
	{IntLiteral} value=S_INT |
	{DoubleLiteral} value=DOUBLE |
	{BoolLiteral} value=BOOL |
	{EnumLiteral} declaration=[datatypes::EnumDeclaration] '.' value=ID;

QualifiedName:
    ID ('.' ID)*;
    
QualifiedNameWithWildcard: QualifiedName '.*'?;

S_INT: INT;
DOUBLE: INT (('.' INT+) | ('d' | 'D') | (('.' INT+) ('d' | 'D')));
BOOL: 'true' | 'false';
