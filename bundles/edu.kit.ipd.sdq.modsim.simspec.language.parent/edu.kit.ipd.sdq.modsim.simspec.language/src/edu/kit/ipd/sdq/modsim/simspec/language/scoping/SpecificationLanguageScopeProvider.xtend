/*
 * generated by Xtext 2.17.0
 */
package edu.kit.ipd.sdq.modsim.simspec.language.scoping

import edu.kit.ipd.sdq.modsim.simspec.model.expressions.ExpressionsPackage
import edu.kit.ipd.sdq.modsim.simspec.model.expressions.Variable
import edu.kit.ipd.sdq.modsim.simspec.model.structure.Event
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes

import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SpecificationLanguageScopeProvider extends AbstractSpecificationLanguageScopeProvider {
	
	override getScope(EObject context, EReference reference) {
		if (context instanceof Variable && reference == ExpressionsPackage.Literals.VARIABLE__ATTRIBUTE /*||
			context instanceof WriteFunction && reference == SpecificationLanguagePackage.Literals.WRITE_FUNCTION__ATTRIBUTE*/) {
			val event = context.getContainerOfType(Event)
			return Scopes.scopeFor(event.readAttributes)
		}
		
		super.getScope(context, reference)
	}
	
}
