/*
 * generated by Xtext 2.17.0
 */
grammar InternalSpecificationLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.kit.ipd.sdq.modsim.simspec.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.kit.ipd.sdq.modsim.simspec.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.kit.ipd.sdq.modsim.simspec.language.services.SpecificationLanguageGrammarAccess;

}

@parser::members {

 	private SpecificationLanguageGrammarAccess grammarAccess;

    public InternalSpecificationLanguageParser(TokenStream input, SpecificationLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Simulator";
   	}

   	@Override
   	protected SpecificationLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSimulator
entryRuleSimulator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimulatorRule()); }
	iv_ruleSimulator=ruleSimulator
	{ $current=$iv_ruleSimulator.current; }
	EOF;

// Rule Simulator
ruleSimulator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getSimulatorAccess().getUnorderedGroup_0());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSimulatorAccess().getUnorderedGroup_0(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getSimulatorAccess().getUnorderedGroup_0(), 0);
					}
								({true}?=>(otherlv_1='name'
								{
									newLeafNode(otherlv_1, grammarAccess.getSimulatorAccess().getNameKeyword_0_0_0());
								}
								otherlv_2='='
								{
									newLeafNode(otherlv_2, grammarAccess.getSimulatorAccess().getEqualsSignKeyword_0_0_1());
								}
								(
									(
										lv_name_3_0=RULE_STRING
										{
											newLeafNode(lv_name_3_0, grammarAccess.getSimulatorAccess().getNameSTRINGTerminalRuleCall_0_0_2_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getSimulatorRule());
											}
											setWithLastConsumed(
												$current,
												"name",
												lv_name_3_0,
												"org.eclipse.xtext.common.Terminals.STRING");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSimulatorAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSimulatorAccess().getUnorderedGroup_0(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getSimulatorAccess().getUnorderedGroup_0(), 1);
					}
								({true}?=>(otherlv_4='description'
								{
									newLeafNode(otherlv_4, grammarAccess.getSimulatorAccess().getDescriptionKeyword_0_1_0());
								}
								otherlv_5='='
								{
									newLeafNode(otherlv_5, grammarAccess.getSimulatorAccess().getEqualsSignKeyword_0_1_1());
								}
								(
									(
										lv_description_6_0=RULE_STRING
										{
											newLeafNode(lv_description_6_0, grammarAccess.getSimulatorAccess().getDescriptionSTRINGTerminalRuleCall_0_1_2_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getSimulatorRule());
											}
											setWithLastConsumed(
												$current,
												"description",
												lv_description_6_0,
												"org.eclipse.xtext.common.Terminals.STRING");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSimulatorAccess().getUnorderedGroup_0());
					}
				)
			)
					)+
					{getUnorderedGroupHelper().canLeave(grammarAccess.getSimulatorAccess().getUnorderedGroup_0())}?
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getSimulatorAccess().getUnorderedGroup_0());
				}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimulatorAccess().getEventsEventParserRuleCall_1_0_0());
					}
					lv_events_7_0=ruleEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimulatorRule());
						}
						add(
							$current,
							"events",
							lv_events_7_0,
							"edu.kit.ipd.sdq.modsim.simspec.language.SpecificationLanguage.Event");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSimulatorAccess().getEntitiesEntityParserRuleCall_1_1_0());
					}
					lv_entities_8_0=ruleEntity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimulatorRule());
						}
						add(
							$current,
							"entities",
							lv_entities_8_0,
							"edu.kit.ipd.sdq.modsim.simspec.language.SpecificationLanguage.Entity");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='event'
			{
				newLeafNode(otherlv_0, grammarAccess.getEventAccess().getEventKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_2='{'
				{
					newLeafNode(otherlv_2, grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_0_2_0());
				}
				(
					otherlv_3='reads'
					{
						newLeafNode(otherlv_3, grammarAccess.getEventAccess().getReadsKeyword_0_2_1_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEventRule());
								}
							}
							otherlv_4=RULE_ID
							{
								newLeafNode(otherlv_4, grammarAccess.getEventAccess().getReadAttributesAttributeCrossReference_0_2_1_1_0());
							}
						)
					)
					(
						otherlv_5=','
						{
							newLeafNode(otherlv_5, grammarAccess.getEventAccess().getCommaKeyword_0_2_1_2_0());
						}
						(
							(
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getEventRule());
									}
								}
								otherlv_6=RULE_ID
								{
									newLeafNode(otherlv_6, grammarAccess.getEventAccess().getReadAttributesAttributeCrossReference_0_2_1_2_1_0());
								}
							)
						)
					)*
				)?
				otherlv_7='}'
				{
					newLeafNode(otherlv_7, grammarAccess.getEventAccess().getRightCurlyBracketKeyword_0_2_2());
				}
			)?
		)
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getGEventParserRuleCall_1());
		}
		this_GEvent_8=ruleGEvent
		{
			$current = $this_GEvent_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEntityAccess().getAttributesAttributeParserRuleCall_2_1_0());
					}
					lv_attributes_3_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEntityRule());
						}
						add(
							$current,
							"attributes",
							lv_attributes_3_0,
							"edu.kit.ipd.sdq.modsim.simspec.language.SpecificationLanguage.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"edu.kit.ipd.sdq.modsim.simspec.language.SpecificationLanguage.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypeAccess().getBaseDataTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypePrimitiveTypeEnumRuleCall_1_0());
				}
				lv_primitiveType_1_0=rulePrimitiveType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"primitiveType",
						lv_primitiveType_1_0,
						"edu.kit.ipd.sdq.modsim.simspec.language.SpecificationLanguage.PrimitiveType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGEvent
entryRuleGEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGEventRule()); }
	iv_ruleGEvent=ruleGEvent
	{ $current=$iv_ruleGEvent.current; }
	EOF;

// Rule GEvent
ruleGEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='blablabla'
		{
			newLeafNode(otherlv_0, grammarAccess.getGEventAccess().getBlablablaKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGEventRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getGEventAccess().getEndEventEventCrossReference_1_0());
				}
			)
		)
	)
;

// Rule PrimitiveType
rulePrimitiveType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='INT'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='DOUBLE'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='BOOL'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getBOOLEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypeAccess().getBOOLEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
