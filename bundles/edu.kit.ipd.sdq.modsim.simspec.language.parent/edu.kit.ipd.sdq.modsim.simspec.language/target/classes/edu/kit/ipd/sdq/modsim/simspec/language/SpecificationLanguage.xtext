grammar edu.kit.ipd.sdq.modsim.simspec.language.SpecificationLanguage with org.eclipse.xtext.common.Terminals

import "http://www.example.org/structure" as structure
import "platform:/resource/edu.kit.ipd.sdq.modsim.simspec.model.datatypes/model/datatypes.ecore" as datatypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate specificationLanguage "http://www.kit.edu/ipd/sdq/modsim/simspec/language/SpecificationLanguage"

Simulator returns structure::Simulator:
	(('name' '=' name=STRING) & ('description' '=' description=STRING)?)
	(events+=Event | entities+=Entity)*;
	
Event returns structure::Event:
	'event' name=ID ('{'
		('reads' readAttributes+=[structure::Attribute] (',' readAttributes+=[structure::Attribute])*)?
	'}')?
	| GEvent 
//	('event' {GEvent} name=ID '{'
//		('reads' readAttribute+=[structure::Attribute] (',' readAttribute+=[structure::Attribute])*)?
//		
//		(schedules+=GSchedules)+
//	'}')
;
	
Entity returns structure::Entity:
	'entity' name=ID ('{'
		(attributes+=Attribute)*
	'}')?;
	
Attribute returns structure::Attribute:
	name=ID ':' type=Type;
	
Type returns datatypes::BaseDataType: {datatypes::BaseDataType} primitiveType=PrimitiveType;

enum PrimitiveType returns datatypes::PrimitiveType: INT | DOUBLE | BOOL;

// temporary rule to make generated package not empty
GEvent: 'blablabla' endEvent=[structure::Event];


DOUBLE: INT ('.' INT+)? ('d' | 'D')?;
BOOL: 'true' | 'false';
